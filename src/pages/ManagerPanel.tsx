import { useEffect, useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { MediaUpload } from "@/components/MediaUpload";
import { useFormValidation, validationRules } from "@/components/FormValidation";
import { Copy, Share, Settings, Upload, AlertCircle, ArrowLeft } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

const ManagerPanel = () => {
  const { toast } = useToast();
  const [apartments, setApartments] = useState<Array<{ id: string; name: string; number: string; entrance_code: string | null; lock_code: string | null; wifi_password: string | null }>>([]);
  const [formData, setFormData] = useState({
    apartmentId: '',
    checkIn: '',
    checkOut: '',
    electronicLockCode: '',
    guestName: ''
  });

  useEffect(() => {
    const load = async () => {
      const { data } = await supabase.from('apartments').select('id,name,number,entrance_code,lock_code,wifi_password').order('created_at', { ascending: false });
      setApartments(data || []);
    };
    load();
  }, []);

  const { errors, validateForm, validateAndClearError, hasErrors } = useFormValidation(validationRules);

  const generateGuestLink = () => {
    const baseUrl = window.location.origin;
    const selected = apartments.find(a => a.id === formData.apartmentId);
    const params = new URLSearchParams({
      guest: formData.guestName,
      checkin: formData.checkIn,
      checkout: formData.checkOut
    });
    const lock = formData.electronicLockCode || selected?.lock_code || '';
    if (lock) params.set('lock', lock);
    if (selected?.entrance_code) params.set('entrance', selected.entrance_code);
    if (selected?.wifi_password) params.set('wifi', selected.wifi_password);
    return `${baseUrl}/apartment/${formData.apartmentId}?${params.toString()}`;
  };

  const handleCopyLink = () => {
    const link = generateGuestLink();
    navigator.clipboard.writeText(link);
    toast({
      title: "–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!",
      description: "–°—Å—ã–ª–∫–∞ –¥–ª—è –≥–æ—Å—Ç—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞",
    });
  };

  const handleShareLink = () => {
    const link = generateGuestLink();
    const message = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${formData.guestName}!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MORENT üå¥\n\n–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞—Å–µ–ª–µ–Ω–∏—é:\n${link}`;
    
    navigator.clipboard.writeText(message);
    toast({
      title: "–°–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!",
      description: "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞",
    });
  };

  const updateFormData = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    validateAndClearError(field, value);
  };

  const createBooking = async () => {
    if (!formData.apartmentId) {
      toast({ title: "–í—ã–±–µ—Ä–∏—Ç–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç", variant: "destructive" });
      return;
    }
    if (!formData.guestName || !formData.checkIn || !formData.checkOut) {
      toast({ title: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –§–ò–û –∏ –¥–∞—Ç—ã", variant: "destructive" });
      return;
    }

    try {
      const insertPayload = {
        apartment_id: formData.apartmentId,
        name: formData.guestName,
        check_in_date: formData.checkIn,
        check_out_date: formData.checkOut,
        lock_code: formData.electronicLockCode || null,
        guide_link: null as string | null,
      };

      const { data, error } = await supabase
        .from('guests')
        .insert(insertPayload)
        .select('*')
        .single();

      if (error) {
        toast({ title: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", variant: "destructive" });
        return;
      }

      const link = generateGuestLink();
      await supabase
        .from('guests')
        .update({ guide_link: link })
        .eq('id', (data as any).id);

      await navigator.clipboard.writeText(link);
      toast({ title: "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ", description: "–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞" });
    } catch (e) {
      toast({ title: "–û—à–∏–±–∫–∞", description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", variant: "destructive" });
    }
  };

  return (
    <div className="min-h-screen bg-gradient-wave p-4">
      <div className="max-w-6xl mx-auto">
        <Card className="p-8 shadow-ocean">
          <div className="flex items-center justify-between mb-8">
            <div className="flex items-center gap-3">
              <Settings className="w-8 h-8 text-primary" />
              <h1 className="text-3xl font-bold font-playfair text-primary uppercase">–ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ MORENT</h1>
            </div>
            <Button 
              variant="outline" 
              onClick={() => window.location.href = '/'}
              className="flex items-center gap-2"
            >
              <ArrowLeft className="w-4 h-4" />
              –ù–∞ –≥–ª–∞–≤–Ω—É—é
            </Button>
          </div>

          <Tabs defaultValue="guest-data" className="w-full">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="guest-data" className="flex items-center gap-2">
                <Settings className="w-4 h-4" />
                –î–∞–Ω–Ω—ã–µ –≥–æ—Å—Ç—è
              </TabsTrigger>
              <TabsTrigger value="media-upload" className="flex items-center gap-2">
                <Upload className="w-4 h-4" />
                –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã
              </TabsTrigger>
            </TabsList>

            <TabsContent value="guest-data" className="space-y-6 mt-6">
              <div className="grid md:grid-cols-2 gap-8">
                {/* Form Section */}
                <div className="space-y-6">
                  <h2 className="text-xl font-semibold font-playfair text-primary border-b border-border pb-2 uppercase">
                    –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Å—Ç—è
                  </h2>

                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="guestName">–ò–º—è –≥–æ—Å—Ç—è</Label>
                      <Input
                        id="guestName"
                        value={formData.guestName}
                        onChange={(e) => updateFormData('guestName', e.target.value)}
                        placeholder="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
                        className={errors.guestName ? "border-destructive" : ""}
                      />
                      {errors.guestName && (
                        <div className="flex items-center gap-1 text-destructive text-sm mt-1">
                          <AlertCircle className="w-4 h-4" />
                          {errors.guestName}
                        </div>
                      )}
                    </div>

                    <div>
                      <Label>–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç</Label>
                      <Select value={formData.apartmentId} onValueChange={(v) => updateFormData('apartmentId', v)}>
                        <SelectTrigger>
                          <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç" />
                        </SelectTrigger>
                        <SelectContent>
                          {apartments.map(a => (
                            <SelectItem key={a.id} value={a.id}>{a.name} ‚Ññ{a.number}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="checkin">–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞</Label>
                        <Input
                          id="checkin"
                          value={formData.checkIn}
                          onChange={(e) => updateFormData('checkIn', e.target.value)}
                          placeholder="08.06.2025 –≤ 15:00"
                          className={errors.checkIn ? "border-destructive" : ""}
                        />
                        {errors.checkIn && (
                          <div className="flex items-center gap-1 text-destructive text-sm mt-1">
                            <AlertCircle className="w-4 h-4" />
                            {errors.checkIn}
                          </div>
                        )}
                      </div>
                      <div>
                        <Label htmlFor="checkout">–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞</Label>
                        <Input
                          id="checkout"
                          value={formData.checkOut}
                          onChange={(e) => updateFormData('checkOut', e.target.value)}
                          placeholder="09.06.2025 –≤ 12:00"
                          className={errors.checkOut ? "border-destructive" : ""}
                        />
                        {errors.checkOut && (
                          <div className="flex items-center gap-1 text-destructive text-sm mt-1">
                            <AlertCircle className="w-4 h-4" />
                            {errors.checkOut}
                          </div>
                        )}
                      </div>
                    </div>

                    <div className="grid grid-cols-2 gap-4">
                      <div className="md:col-span-2">
                        <Label htmlFor="lock">–ö–æ–¥ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–º–∫–∞ (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è –∫–æ–¥–∞ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏)</Label>
                        <Input
                          id="lock"
                          value={formData.electronicLockCode}
                          onChange={(e) => updateFormData('electronicLockCode', e.target.value)}
                          placeholder="1111"
                          className={errors.electronicLockCode ? "border-destructive" : ""}
                        />
                        {errors.electronicLockCode && (
                          <div className="flex items-center gap-1 text-destructive text-sm mt-1">
                            <AlertCircle className="w-4 h-4" />
                            {errors.electronicLockCode}
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>

                {/* Preview and Actions */}
                <div className="space-y-6">
                  <h2 className="text-xl font-semibold font-playfair text-primary border-b border-border pb-2 uppercase">
                    –°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                  </h2>

                  <Card className="p-4 bg-muted">
                    <Label className="text-sm font-medium">–°—Å—ã–ª–∫–∞ –¥–ª—è –≥–æ—Å—Ç—è:</Label>
                    <Textarea
                      value={generateGuestLink()}
                      readOnly
                      className="mt-2 h-20 resize-none"
                    />
                  </Card>

                  <div className="space-y-3">
                    <Button 
                      onClick={handleCopyLink}
                      className="w-full bg-gradient-ocean shadow-ocean"
                    >
                      <Copy className="w-4 h-4 mr-2" />
                      –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
                    </Button>

                    <Button 
                      onClick={handleShareLink}
                      variant="outline"
                      className="w-full border-2 border-accent text-accent hover:bg-accent hover:text-white"
                    >
                      <Share className="w-4 h-4 mr-2" />
                      –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥–æ—Å—Ç—è
                    </Button>

                    <Button 
                      onClick={createBooking}
                      variant="default"
                      className="w-full"
                    >
                      –°–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                    </Button>
                  </div>

                  <Card className="p-4 bg-accent/5 border-accent/20">
                    <h3 className="font-medium text-accent mb-2">–ì–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</h3>
                    <p className="text-sm text-foreground">
                      –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {formData.guestName || '[–ò–º—è –≥–æ—Å—Ç—è]'}!<br/>
                      –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MORENT üå¥<br/><br/>
                      –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞—Å–µ–ª–µ–Ω–∏—é:<br/>
                      [–°—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏]
                    </p>
                  </Card>
                </div>
              </div>
            </TabsContent>

            <TabsContent value="media-upload" className="space-y-6 mt-6">
              <div className="grid md:grid-cols-2 gap-6">
                <MediaUpload 
                  category="welcome_photos" 
                  title="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"
                />
                <MediaUpload 
                  category="entrance_videos" 
                  title="–í–∏–¥–µ–æ –ø–æ–¥—ä–µ–∑–¥–∞"
                />
                <MediaUpload 
                  category="lock_videos" 
                  title="–í–∏–¥–µ–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–º–∫–∞"
                />
                <MediaUpload 
                  category="trash_location" 
                  title="–í–∏–¥–µ–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –º—É—Å–æ—Ä–Ω—ã—Ö –±–∞–∫–æ–≤" 
                />
                <MediaUpload 
                  category="territory_description" 
                  title="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏" 
                />
                <MediaUpload 
                  category="beach_directions" 
                  title="–ö–∞–∫ –¥–æ–π—Ç–∏ –¥–æ –ø–ª—è–∂–∞" 
                />
                <MediaUpload 
                  category="excursion_info" 
                  title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Å–∫—É—Ä—Å–∏—è—Ö" 
                />
                <MediaUpload 
                  category="car_rental" 
                  title="–ê—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π" 
                />
                <MediaUpload 
                  category="general_info" 
                  title="–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" 
                />
              </div>
            </TabsContent>
          </Tabs>
        </Card>
      </div>
    </div>
  );
};

export default ManagerPanel;